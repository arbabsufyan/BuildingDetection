# -*- coding: utf-8 -*-
"""Building Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mmxjT2UU6Cj9ZDKjJVKq3JOhol-gg3gt
"""

import cv2
from google.colab.patches import cv2_imshow
import requests
import numpy as np
import matplotlib.pyplot as plt
# define API key and map settings
api_key = "Paste your API Key here"
center = "25.0980968,55.2373434"
zoom = 18
size = "420x420"
# Load the Google map default / RoadView image with building Outlines
url_With_Outlines = f"https://maps.googleapis.com/maps/api/staticmap?center={center}&zoom={zoom}&size={size}&maptype=roadmap&style=feature:all|element:labels|visibility:off&key={api_key}"
response = requests.get(url_With_Outlines)
img_Outlines = cv2.imdecode(np.frombuffer(response.content, np.uint8), -1)

# Convert the image to grayscale
gray = cv2.cvtColor(img_Outlines, cv2.COLOR_BGR2GRAY)


# Create histogram of pixel intensity values
hist, bins = np.histogram(gray.ravel(), 256, [0, 256])

# Modify the bins parameter to change the x-axis range
new_bins = np.linspace(240, 255, 56)

# Plot histogram with modified x-axis range
plt.hist(gray.ravel(), bins=new_bins)
plt.xlabel('Pixel intensity')
plt.ylabel('Frequency')

# Set tick locations and labels on x-axis
tick_locs = np.linspace(240, 255, 6)
tick_labels = ['240', '243', '245', '248','251','254']
plt.xticks(tick_locs, tick_labels)

# Loop over histogram values and bin edges to place text labels above each bar
for i, val in enumerate(hist):
    plt.text((bins[i] + bins[i+1]) / 2, val + 5, str(int(val)), ha='center')

plt.show()


# Apply a threshold to the grayscale image
_, thresh = cv2.threshold(gray, 243, 255, cv2.THRESH_BINARY)


# Perform morphological operations on the thresholded image
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))
morphed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)

# Find contours in the thresholded image
contours, _ = cv2.findContours(morphed, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

# Filter out the contours that are not building outlines
buildings = []
for contour in contours:
    area = cv2.contourArea(contour)
    x, y, w, h = cv2.boundingRect(contour)
    aspect_ratio = float(w) / h
    if area > 50 and aspect_ratio > 0.1:
        buildings.append(contour)




# Load the Google map satellite image of the same scene.
url_No_Outlines = f"https://maps.googleapis.com/maps/api/staticmap?center={center}&zoom={zoom}&size={size}&maptype=satellite&style=feature:all|element:labels|visibility:off&style=feature:landscape.man_made|element:geometry|color:0x888888&key={api_key}"
response = requests.get(url_No_Outlines)
img_No_Outlines = cv2.imdecode(np.frombuffer(response.content, np.uint8), -1)


# Draw the filtered contours on a copy of the satellite image
img_copy = img_No_Outlines.copy()
cv2.drawContours(img_copy, buildings, -1, (0, 255, 255), 2)


# Display the result
cv2_imshow(img_Outlines)
cv2_imshow(img_copy)